// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: hotel_svc_api.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HotelService_GetHotelsList_FullMethodName     = "/proto.api.v1.HotelService/GetHotelsList"
	HotelService_GetHotelById_FullMethodName      = "/proto.api.v1.HotelService/GetHotelById"
	HotelService_CreateHotel_FullMethodName       = "/proto.api.v1.HotelService/CreateHotel"
	HotelService_DeleteHotel_FullMethodName       = "/proto.api.v1.HotelService/DeleteHotel"
	HotelService_GetRoomsByHotelId_FullMethodName = "/proto.api.v1.HotelService/GetRoomsByHotelId"
	HotelService_GetRoomById_FullMethodName       = "/proto.api.v1.HotelService/GetRoomById"
	HotelService_CreateRoom_FullMethodName        = "/proto.api.v1.HotelService/CreateRoom"
	HotelService_DeleteRoom_FullMethodName        = "/proto.api.v1.HotelService/DeleteRoom"
)

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	// Get the hotel list
	GetHotelsList(ctx context.Context, in *GetHotelsListRequest, opts ...grpc.CallOption) (*GetHotelsListResponse, error)
	// Get exact hotel by id
	GetHotelById(ctx context.Context, in *GetHotelByIdRequest, opts ...grpc.CallOption) (*GetHotelByIdResponse, error)
	// Create new hotel
	CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*CreateHotelResponse, error)
	// Delete existing hotel
	DeleteHotel(ctx context.Context, in *DeleteHotelRequest, opts ...grpc.CallOption) (*DeleteHotelResponse, error)
	// Get all rooms in exact hotel
	GetRoomsByHotelId(ctx context.Context, in *GetRoomsByHotelIdRequest, opts ...grpc.CallOption) (*GetRoomsByHotelIdResponse, error)
	// Get exact room by id
	GetRoomById(ctx context.Context, in *GetRoomByIdRequest, opts ...grpc.CallOption) (*GetRoomByIdResponse, error)
	// Create new room
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	// Delete exact room
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) GetHotelsList(ctx context.Context, in *GetHotelsListRequest, opts ...grpc.CallOption) (*GetHotelsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotelsListResponse)
	err := c.cc.Invoke(ctx, HotelService_GetHotelsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetHotelById(ctx context.Context, in *GetHotelByIdRequest, opts ...grpc.CallOption) (*GetHotelByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotelByIdResponse)
	err := c.cc.Invoke(ctx, HotelService_GetHotelById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*CreateHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_CreateHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteHotel(ctx context.Context, in *DeleteHotelRequest, opts ...grpc.CallOption) (*DeleteHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_DeleteHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetRoomsByHotelId(ctx context.Context, in *GetRoomsByHotelIdRequest, opts ...grpc.CallOption) (*GetRoomsByHotelIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomsByHotelIdResponse)
	err := c.cc.Invoke(ctx, HotelService_GetRoomsByHotelId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetRoomById(ctx context.Context, in *GetRoomByIdRequest, opts ...grpc.CallOption) (*GetRoomByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomByIdResponse)
	err := c.cc.Invoke(ctx, HotelService_GetRoomById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, HotelService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, HotelService_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility.
type HotelServiceServer interface {
	// Get the hotel list
	GetHotelsList(context.Context, *GetHotelsListRequest) (*GetHotelsListResponse, error)
	// Get exact hotel by id
	GetHotelById(context.Context, *GetHotelByIdRequest) (*GetHotelByIdResponse, error)
	// Create new hotel
	CreateHotel(context.Context, *CreateHotelRequest) (*CreateHotelResponse, error)
	// Delete existing hotel
	DeleteHotel(context.Context, *DeleteHotelRequest) (*DeleteHotelResponse, error)
	// Get all rooms in exact hotel
	GetRoomsByHotelId(context.Context, *GetRoomsByHotelIdRequest) (*GetRoomsByHotelIdResponse, error)
	// Get exact room by id
	GetRoomById(context.Context, *GetRoomByIdRequest) (*GetRoomByIdResponse, error)
	// Create new room
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	// Delete exact room
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHotelServiceServer struct{}

func (UnimplementedHotelServiceServer) GetHotelsList(context.Context, *GetHotelsListRequest) (*GetHotelsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotelsList not implemented")
}
func (UnimplementedHotelServiceServer) GetHotelById(context.Context, *GetHotelByIdRequest) (*GetHotelByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotelById not implemented")
}
func (UnimplementedHotelServiceServer) CreateHotel(context.Context, *CreateHotelRequest) (*CreateHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotel not implemented")
}
func (UnimplementedHotelServiceServer) DeleteHotel(context.Context, *DeleteHotelRequest) (*DeleteHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotel not implemented")
}
func (UnimplementedHotelServiceServer) GetRoomsByHotelId(context.Context, *GetRoomsByHotelIdRequest) (*GetRoomsByHotelIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomsByHotelId not implemented")
}
func (UnimplementedHotelServiceServer) GetRoomById(context.Context, *GetRoomByIdRequest) (*GetRoomByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomById not implemented")
}
func (UnimplementedHotelServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedHotelServiceServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}
func (UnimplementedHotelServiceServer) testEmbeddedByValue()                      {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	// If the following call pancis, it indicates UnimplementedHotelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_GetHotelsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotelsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetHotelsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotelsList(ctx, req.(*GetHotelsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetHotelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetHotelById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotelById(ctx, req.(*GetHotelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_CreateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_CreateHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateHotel(ctx, req.(*CreateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_DeleteHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteHotel(ctx, req.(*DeleteHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetRoomsByHotelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsByHotelIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetRoomsByHotelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetRoomsByHotelId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetRoomsByHotelId(ctx, req.(*GetRoomsByHotelIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetRoomById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetRoomById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetRoomById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetRoomById(ctx, req.(*GetRoomByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.v1.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHotelsList",
			Handler:    _HotelService_GetHotelsList_Handler,
		},
		{
			MethodName: "GetHotelById",
			Handler:    _HotelService_GetHotelById_Handler,
		},
		{
			MethodName: "CreateHotel",
			Handler:    _HotelService_CreateHotel_Handler,
		},
		{
			MethodName: "DeleteHotel",
			Handler:    _HotelService_DeleteHotel_Handler,
		},
		{
			MethodName: "GetRoomsByHotelId",
			Handler:    _HotelService_GetRoomsByHotelId_Handler,
		},
		{
			MethodName: "GetRoomById",
			Handler:    _HotelService_GetRoomById_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _HotelService_CreateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _HotelService_DeleteRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel_svc_api.proto",
}
