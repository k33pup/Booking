// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Hotel Booking API
 *
 * API для управления бронированием отелей
 *
 * API version: 1.0.0
 */

package openapi

import (
	"context"
	"github.com/k33pup/Booking.git/internal/domain"
	"github.com/k33pup/Booking.git/internal/usecases"
	"net/http"
	"errors"
)

// DefaultAPIService is a service that implements the logic for the DefaultAPIServicer
// This service should implement the business logic for every endpoint for the DefaultAPI API.
// Include any external packages or services that will be required by this service.
type DefaultAPIService struct {
	useCase usecases.IBookedRoomRepository
}

// NewDefaultAPIService creates a default generated_api service
func NewDefaultAPIService(useCase usecases.IBookedRoomRepository) *DefaultAPIService {
	return &DefaultAPIService{useCase}
}

// ApprovePaymentWebhook - Webhook для подтверждения платежа
func (s *DefaultAPIService) ApprovePaymentWebhook(ctx context.Context, approvePaymentWebhookRequest ApprovePaymentWebhookRequest) (ImplResponse, error) {
	if (!approvePaymentWebhookRequest.Approve) {
		// TODO send that payment is canceled
		s.useCase.UnReserveRoom(ctx, approvePaymentWebhookRequest.RoomId)
		return Response(http.StatusOK, ApprovePaymentWebhook200Response{
			Message: "Payment is not approver, unreserve room",
		}), nil
	}

	err := s.useCase.ApproveRoom(ctx, approvePaymentWebhookRequest.RoomId)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusOK, ApprovePaymentWebhook200Response{
		Message: "Payment approved successfully",
	}), nil
}

// GetUnbookedRooms - Получить список свободных комнат по ID отеля
func (s *DefaultAPIService) GetUnbookedRooms(ctx context.Context, hotelId string) (ImplResponse, error) {
	var hotelsRooms []domain.Room
	// TODO обращение к сервису hotel забираем комнаты
	var unbookedRooms []domain.Room
	for _, room := range hotelsRooms {
		isBooked, err := s.useCase.IsRoomBooked(ctx, room.Id)
		if err != nil {
			return Response(http.StatusInternalServerError, err), nil
		}
		if !isBooked {
			unbookedRooms = append(unbookedRooms, room)
		}
	}
	return Response(http.StatusOK, hotelsRooms), nil
}

// GetBookedRooms - Получить список забронированных комнат по ID отеля
func (s *DefaultAPIService) GetBookedRooms(ctx context.Context, hotelId string) (ImplResponse, error) {
	bookedRooms, err := s.useCase.GetBookedRoomsList(ctx, hotelId)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	if len(bookedRooms) == 0 {
		return Response(http.StatusNotFound, nil), nil
	}

	return Response(http.StatusOK, bookedRooms), nil
}

// BookRoomPost - Book a room by ID
func (s *DefaultAPIService) BookRoomPost(ctx context.Context, bookedRoom BookedRoom) (ImplResponse, error) {
	// Проверка существования отеля
	if bookedRoom.HotelID == "" {
		return Response(http.StatusBadRequest, nil), errors.New("hotelId is required")
	}

	// Проверка, забронирована ли комната
	isBooked, err := s.useCase.IsRoomBooked(ctx, bookedRoom.ID)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	if isBooked {
		return Response(http.StatusConflict, nil), errors.New("room is already booked")
	}

	newBookedRoom := &domain.BookedRoom{
		HotelID: bookedRoom.HotelID,
		ID:      bookedRoom.ID,
		Entry:   bookedRoom.Entry,
		Exit: 	 bookedRoom.Exit,
		Email:   bookedRoom.Email,
		IsPaid:  false,
	}

	if err = s.useCase.ReserveRoom(ctx, newBookedRoom); err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	// TODO ask payment to approve

	return Response(http.StatusCreated, newBookedRoom), nil
}
