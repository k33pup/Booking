// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payment System API
 *
 * API для обработки платежей за комнаты.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/k33pup/Booking/payment_svc/internal/pkg/logger"
	"github.com/k33pup/Booking/payment_svc/internal/usecases"
	"log/slog"
	"math/rand"
	"net/http"
	"time"
)

// DefaultAPIService is a service that implements the logic for the DefaultAPIServicer
// This service should implement the business logic for every endpoint for the DefaultAPI API.
// Include any external packages or services that will be required by this service.
type DefaultAPIService struct {
	useCase usecases.IPaymentUseCase
	log     *slog.Logger
}

// NewDefaultAPIService creates a default api service
func NewDefaultAPIService(useCase usecases.IPaymentUseCase) *DefaultAPIService {
	log, _ := logger.NewLogger()
	return &DefaultAPIService{useCase: useCase, log: log}
}

func sendWebhookNotification(webhookUrl string, data map[string]interface{}) error {
	payload, err := json.Marshal(data)
	if err != nil {
		return err
	}
	req, err := http.NewRequest(http.MethodPost, webhookUrl, bytes.NewBuffer(payload))
	if err != nil {
		return err
	}
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return fmt.Errorf("webhook returned non-2xx status code: %d", resp.StatusCode)
	}
	return nil
}

// CreatePaymentPost - Создать новый платеж
func (s *DefaultAPIService) CreatePaymentPost(ctx context.Context, createPaymentPostRequest CreatePaymentPostRequest) (ImplResponse, error) {
	s.log.Info("Создание платежа на комнату", slog.String("room_id", createPaymentPostRequest.RoomId))

	result, err := s.useCase.CreatePayment(ctx, ToDomainPayment(createPaymentPostRequest))
	if err != nil {
		s.log.Error("Ошибка при создании платежа")
		return Response(http.StatusInternalServerError, ResultResponse{RoomId: createPaymentPostRequest.RoomId, Status: "error"}), nil
	}
	// Эмулируем платёж
	go func() {
		time.Sleep(5 * time.Second)
		webhookResponse := map[string]interface{}{
			"room_id": createPaymentPostRequest.RoomId,
			"approve": rand.Intn(5) > 1,
		}
		err := sendWebhookNotification(createPaymentPostRequest.WebhookUrl, webhookResponse)
		if err != nil {
			s.log.Error("Ошибка отправки webhook", slog.String("webhookUrl", createPaymentPostRequest.WebhookUrl), slog.Any("error", err))
			return
		}
		s.log.Info("Webhook уведомление отправлено", slog.String("webhookUrl", createPaymentPostRequest.WebhookUrl))
	}()

	return Response(http.StatusAccepted, ToResultResponse(result)), nil
}
