/*
Hotel Booking API

API для управления бронированием отелей

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BookedRoom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookedRoom{}

// BookedRoom struct for BookedRoom
type BookedRoom struct {
	// ID забронированной комнаты
	ID string `json:"ID"`
	// ID отеля
	HotelID string `json:"HotelID"`
	// Дата заезда
	Entry time.Time `json:"Entry"`
	// Дата выезда
	Exit time.Time `json:"Exit"`
	// Email пользователя, забронировавшего комнату
	Email string `json:"Email"`
	// оплачена ли комната
	IsPaid bool `json:"IsPaid"`
}

type _BookedRoom BookedRoom

// NewBookedRoom instantiates a new BookedRoom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookedRoom(iD string, hotelID string, entry time.Time, exit time.Time, email string, isPaid bool) *BookedRoom {
	this := BookedRoom{}
	this.ID = iD
	this.HotelID = hotelID
	this.Entry = entry
	this.Exit = exit
	this.Email = email
	this.IsPaid = isPaid
	return &this
}

// NewBookedRoomWithDefaults instantiates a new BookedRoom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookedRoomWithDefaults() *BookedRoom {
	this := BookedRoom{}
	return &this
}

// GetID returns the ID field value
func (o *BookedRoom) GetID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ID
}

// GetIDOk returns a tuple with the ID field value
// and a boolean to check if the value has been set.
func (o *BookedRoom) GetIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ID, true
}

// SetID sets field value
func (o *BookedRoom) SetID(v string) {
	o.ID = v
}

// GetHotelID returns the HotelID field value
func (o *BookedRoom) GetHotelID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HotelID
}

// GetHotelIDOk returns a tuple with the HotelID field value
// and a boolean to check if the value has been set.
func (o *BookedRoom) GetHotelIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HotelID, true
}

// SetHotelID sets field value
func (o *BookedRoom) SetHotelID(v string) {
	o.HotelID = v
}

// GetEntry returns the Entry field value
func (o *BookedRoom) GetEntry() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value
// and a boolean to check if the value has been set.
func (o *BookedRoom) GetEntryOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entry, true
}

// SetEntry sets field value
func (o *BookedRoom) SetEntry(v time.Time) {
	o.Entry = v
}

// GetExit returns the Exit field value
func (o *BookedRoom) GetExit() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Exit
}

// GetExitOk returns a tuple with the Exit field value
// and a boolean to check if the value has been set.
func (o *BookedRoom) GetExitOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exit, true
}

// SetExit sets field value
func (o *BookedRoom) SetExit(v time.Time) {
	o.Exit = v
}

// GetEmail returns the Email field value
func (o *BookedRoom) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *BookedRoom) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *BookedRoom) SetEmail(v string) {
	o.Email = v
}

// GetIsPaid returns the IsPaid field value
func (o *BookedRoom) GetIsPaid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPaid
}

// GetIsPaidOk returns a tuple with the IsPaid field value
// and a boolean to check if the value has been set.
func (o *BookedRoom) GetIsPaidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPaid, true
}

// SetIsPaid sets field value
func (o *BookedRoom) SetIsPaid(v bool) {
	o.IsPaid = v
}

func (o BookedRoom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookedRoom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ID"] = o.ID
	toSerialize["HotelID"] = o.HotelID
	toSerialize["Entry"] = o.Entry
	toSerialize["Exit"] = o.Exit
	toSerialize["Email"] = o.Email
	toSerialize["IsPaid"] = o.IsPaid
	return toSerialize, nil
}

func (o *BookedRoom) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ID",
		"HotelID",
		"Entry",
		"Exit",
		"Email",
		"IsPaid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBookedRoom := _BookedRoom{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBookedRoom)

	if err != nil {
		return err
	}

	*o = BookedRoom(varBookedRoom)

	return err
}

type NullableBookedRoom struct {
	value *BookedRoom
	isSet bool
}

func (v NullableBookedRoom) Get() *BookedRoom {
	return v.value
}

func (v *NullableBookedRoom) Set(val *BookedRoom) {
	v.value = val
	v.isSet = true
}

func (v NullableBookedRoom) IsSet() bool {
	return v.isSet
}

func (v *NullableBookedRoom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookedRoom(val *BookedRoom) *NullableBookedRoom {
	return &NullableBookedRoom{value: val, isSet: true}
}

func (v NullableBookedRoom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookedRoom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


